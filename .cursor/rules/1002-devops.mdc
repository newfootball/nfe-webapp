---
description: APPLY DevOps best practices WHEN managing infrastructure and deployment TO ensure reliability, scalability, and security
globs: **/docker-compose.yml, **/Dockerfile, **/.github/workflows/*.yml
alwaysApply: false
---

# DevOps Standards

<version>1.0.0</version>

## Context
- These rules apply to all infrastructure and deployment code
- They ensure consistent, reliable, and secure deployments
- They cover containerization, CI/CD, and infrastructure as code
- They apply to both development and production environments

## Requirements

### Docker and Containerization
- Use multi-stage builds to minimize image size
- Specify exact versions for base images
- Run containers as non-root users
- Include health checks in production containers
- Document exposed ports and volumes in Dockerfile comments
- Use `.dockerignore` to exclude unnecessary files

### Docker Compose
- Use environment variables with defaults for configuration
- Separate development and production compose files
- Define service dependencies with `depends_on`
- Use named volumes for persistent data
- Document all environment variables in comments
- Include resource limits for services

### CI/CD Pipelines
- Implement separate stages for build, test, and deploy
- Run tests before deployment
- Use caching to speed up builds
- Implement branch-based workflows (dev, staging, production)
- Automate version tagging based on semantic versioning
- Include security scanning in the pipeline

### Infrastructure as Code
- Use declarative configuration (Terraform, CloudFormation, etc.)
- Store infrastructure code in version control
- Implement environment-specific configurations
- Use modules/components for reusable infrastructure
- Document all resources and their relationships
- Implement proper state management

### Monitoring and Logging
- Implement structured logging
- Centralize logs with proper retention policies
- Set up monitoring for key metrics
- Configure alerts for critical thresholds
- Implement distributed tracing for microservices
- Document expected metrics and their significance

### Security
- Scan container images for vulnerabilities
- Rotate secrets and credentials regularly
- Use secret management solutions (not hardcoded values)
- Implement network policies to restrict traffic
- Follow the principle of least privilege for all accounts
- Regularly update dependencies and base images

## Examples

<example>
# Good Dockerfile example
FROM node:22-alpine AS builder

WORKDIR /app
COPY package*.json ./
RUN npm ci
COPY . .
RUN npm run build

FROM node:22-alpine AS runner
WORKDIR /app

# Run as non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Copy only necessary files from builder
COPY --from=builder --chown=nodejs:nodejs /app/dist ./dist
COPY --from=builder --chown=nodejs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nodejs:nodejs /app/package.json ./

USER nodejs

# Document exposed port
# API server listens on port 3000
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
  CMD wget -qO- http://localhost:3000/health || exit 1

CMD ["node", "dist/main.js"]
</example>

<example>
# Good GitHub Actions workflow example
name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linting
        run: npm run lint
      
      - name: Run tests
        run: npm test
        
      - name: Build application
        run: npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/

  security-scan:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run security scan
        uses: snyk/actions/node@master
        with:
          args: --severity-threshold=high

  deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [build, security-scan]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/
      
      - name: Deploy to production
        run: |
          echo "Deploying to production..."
          # Deployment steps here
</example>

<example type="invalid">
# Bad Dockerfile example
FROM node:latest

COPY . .
RUN npm install
RUN npm run build

# No user specification (runs as root)
# No health check
# Using latest tag
# Installing dev dependencies
# No multi-stage build

EXPOSE 3000
CMD ["npm", "start"]
</example>

<example type="invalid">
# Bad GitHub Actions workflow example
name: Deploy

on: [push]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Build and deploy
        run: |
          npm install
          npm run build
          # Directly deploying without tests
          # No security scanning
          # No conditional deployment based on branch
          # Deploying on every push
          echo ${{ secrets.PROD_PASSWORD }} > password.txt
          ./deploy.sh
</example>

## Critical Rules

<critical>
- NEVER store secrets or credentials in code repositories
- ALWAYS run security scans before deployment
- NEVER use latest tags for production containers
- ALWAYS implement proper health checks for services
- NEVER run containers as root in production
- ALWAYS backup data before major infrastructure changes
</critical> 
